// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
}

enum ElhaaDestination {
  WESTARMY
  FERKA
  PEACEKEEPING
  HAYAKAREMA
  OTHER
}

enum AbsenceType {
  VACATION
  VACATIONEXTENSION
  MISSION
  MISSIONEXTENSION
  VACATIONPLUSMISSION
  VACATIONPLUSMISSIONEXTENSION
  SICK
  TRAVELING
  DAWRAHATMEYA
  DAWRATALEMEYA
  OTHER
}

model User {
  id         Int             @id @default(autoincrement())
  username   String          @unique
  password   String
  faxCreator OfficersFaxes[]
  informer   OfficersFaxes[] @relation("informer")
  follower   OfficersFaxes[] @relation("follower")
  uploader   Fax[]           @relation("uploader")
  archiver   Fax[]           @relation("archiver")
  Absence    Absence[]
}

model Officer {
  id             Int             @id @default(autoincrement())
  name           String
  normalizedName String          @map("normalizedName")
  aqdameya       Int?
  repetition     Int             @default(0)
  profession     String?
  militaryNo     Int?            @map("militaryNo")
  dofaa          String?
  rankId         Int
  rank           Rank            @relation(fields: [rankId], references: [id])
  weaponId       Int
  weapon         Weapon          @relation(fields: [weaponId], references: [id])
  unitId         Int
  unit           Unit            @relation(fields: [unitId], references: [id])
  birthdate      DateTime?
  workdate       DateTime?
  promotiondate  DateTime?
  phone          Phone[]
  nationalNo     String?         @map("nationalNo")
  address        String?
  maritalStatus  MaritalStatus?
  numOfChildren  Int?
  length         Int?
  weight         Int?
  OfficersFaxes  OfficersFaxes[]
  Absence        Absence[]
  Elhaa          Elhaa[]
}

model Rank {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Officer Officer[]
}

model Weapon {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Officer Officer[]
}

model Unit {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  parentId Int?
  parent   Unit?     @relation("taba3eya", fields: [parentId], references: [id])
  children Unit[]    @relation("taba3eya")
  officer  Officer[]
}

model Phone {
  id        Int     @id @default(autoincrement())
  number    String
  officerId Int
  owner     Officer @relation(fields: [officerId], references: [id])

  @@unique([officerId, number])
}

model Fax {
  id            Int             @id @default(autoincrement())
  date          DateTime        @default(now())
  description   String?
  uploaderId    Int
  uploader      User            @relation("uploader", fields: [uploaderId], references: [id])
  archivedate   DateTime?
  archiverId    Int?
  archiver      User?           @relation("archiver", fields: [archiverId], references: [id])
  OfficersFaxes OfficersFaxes[]
  Elhaa         Elhaa?          @relation(fields: [elhaaId], references: [id])
  elhaaId       Int?
}

model OfficersFaxes {
  officerId      Int
  officer        Officer   @relation(fields: [officerId], references: [id])
  faxId          Int
  fax            Fax       @relation(fields: [faxId], references: [id])
  duedate        DateTime?
  informdate     DateTime?
  informerId     Int?
  informer       User?     @relation("informer", fields: [informerId], references: [id])
  followupdate   DateTime?
  followupUserId Int?
  followupUser   User?     @relation("follower", fields: [followupUserId], references: [id])
  notes          String?
  User           User?     @relation(fields: [userId], references: [id])
  userId         Int?      @map("userId")

  @@id([officerId, faxId])
}

model Absence {
  id          Int         @id @default(autoincrement())
  absenceType AbsenceType @default(VACATION)
  officerId   Int
  officer     Officer     @relation(fields: [officerId], references: [id])
  startDate   DateTime    @map("startDate")
  endDate     DateTime?   @map("endDate")
  notes       String?
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
}

model Elhaa {
  id          Int              @id @default(autoincrement())
  destination ElhaaDestination
  notes       String?
  startdate   DateTime
  enddate     DateTime?
  faxId       Int?
  fax         Fax[]
  officerId   Int
  Officer     Officer          @relation(fields: [officerId], references: [id])
}
